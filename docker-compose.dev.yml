version: '3.8'

# Docker Compose para desarrollo con hot reload y volúmenes en vivo
services:
  # Base de datos PostgreSQL
  db:
    extends:
      file: docker-compose.yml
      service: db

  # Backend FastAPI con hot reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-projecto-ia}_backend_dev
    restart: unless-stopped
    environment:
      # Hereda del .env y sobrescribe para desarrollo
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@db:5432/${POSTGRES_DB:-proyecto_ia_db}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:4200,http://localhost:80}
      ENVIRONMENT: development
      DEBUG: true
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-}
    volumes:
      # Volúmenes en vivo para desarrollo
      - ${BACKEND_CODE_PATH:-./backend}:/app:cached
      - ${BACKEND_LOGS_PATH:-./logs}:/app/logs
      - ${UPLOAD_PATH:-./uploads}:/app/uploads
      # Excluir node_modules si existen
      - /app/__pycache__
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]

  # Frontend Angular con hot reload
  frontend:
    image: node:18-alpine
    container_name: ${PROJECT_NAME:-projecto-ia}_frontend_dev
    restart: unless-stopped
    working_dir: /app
    environment:
      - API_URL=${API_URL:-http://localhost:8000}
      - ENVIRONMENT=development
    volumes:
      # Volúmenes en vivo para desarrollo
      - ${FRONTEND_CODE_PATH:-./frontend}:/app:cached
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    command: >
      sh -c "npm install && npm run start -- --host 0.0.0.0 --port 4200"
    depends_on:
      - backend
    networks:
      - app-network

  # Adminer para gestión de base de datos
  adminer:
    extends:
      file: docker-compose.yml
      service: adminer

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}

networks:
  app-network:
    driver: bridge
    name: ${PROJECT_NAME:-projecto-ia}_network_dev