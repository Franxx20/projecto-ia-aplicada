version: '3.8'

# Docker Compose para desarrollo con hot reload y volúmenes en vivo
services:
  # Base de datos PostgreSQL
  db:
    extends:
      file: docker-compose.yml
      service: db

  # Backend FastAPI con hot reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-projecto-ia}_backend_dev
    restart: unless-stopped
    environment:
      # Hereda del .env y sobrescribe para desarrollo
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@db:5432/${POSTGRES_DB:-proyecto_ia_db}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:4200,http://localhost:80}
      ENVIRONMENT: development
      DEBUG: true
      CLAUDE_API_KEY: ${CLAUDE_API_KEY:-}
      # Azure Storage - Usando Azurite (emulador local)
      AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
      AZURE_STORAGE_CONTAINER_NAME: plantitas-imagenes
      AZURE_STORAGE_USE_EMULATOR: true
    volumes:
      # Volúmenes en vivo para desarrollo
      - ${BACKEND_CODE_PATH:-./backend}:/app:cached
      - ${BACKEND_LOGS_PATH:-./logs}:/app/logs
      - ${UPLOAD_PATH:-./uploads}:/app/uploads
      # Excluir node_modules si existen
      - /app/__pycache__
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]

  # Frontend Next.js con hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        # Pasar variables de build para Next.js
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: ${PROJECT_NAME:-projecto-ia}_frontend_dev
    restart: unless-stopped
    environment:
      # Variables de entorno para Next.js en desarrollo
      # NEXT_PUBLIC_API_URL: URL que usa el navegador (cliente)
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      # INTERNAL_API_URL: URL que usa Next.js internamente (server-side)
      - INTERNAL_API_URL=http://backend:8000
      - NODE_ENV=development
      - PORT=4200
      - HOSTNAME=0.0.0.0
      - WATCHPACK_POLLING=true
    volumes:
      # Volúmenes en vivo para desarrollo con hot reload
      - ${FRONTEND_CODE_PATH:-./frontend}:/app:cached
      # Excluir node_modules y .next para evitar conflictos
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    depends_on:
      - backend
    networks:
      - app-network

  # Adminer para gestión de base de datos
  adminer:
    extends:
      file: docker-compose.yml
      service: adminer

  # Azurite - Emulador de Azure Storage para desarrollo local
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: ${PROJECT_NAME:-projecto-ia}_azurite_dev
    restart: unless-stopped
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    volumes:
      - azurite_data:/data
    networks:
      - app-network
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose --location /data

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
  azurite_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: ${PROJECT_NAME:-projecto-ia}_network_dev