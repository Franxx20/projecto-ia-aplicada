# Azure Deployment Plan for proyecto-plantitas

## **Goal**
Desplegar el proyecto "proyecto plantitas" en Azure Container Apps utilizando AZD (Azure Developer CLI), con una arquitectura completa que incluya backend FastAPI, frontend Angular y base de datos PostgreSQL.

## **Project Information**
**AppName**: proyecto-plantitas
- **Technology Stack**: 
  - Backend: FastAPI con SQLAlchemy ORM (Python)
  - Frontend: Angular + TypeScript + Tailwind CSS
  - Base de datos: PostgreSQL
- **Application Type**: Aplicación web completa MVC con gestión de plantitas
- **Containerization**: Lista para deployment con Dockerfiles existentes
- **Dependencies**: PostgreSQL como base de datos principal
- **Hosting Recommendation**: Azure Container Apps para hosting serverless escalable de contenedores

## **Azure Resources Architecture**
> **Instala la extensión mermaid en VS Code para ver la arquitectura.**

```mermaid
graph TB
    subgraph "Azure Container Apps Environment"
        Frontend[Angular Frontend<br/>Container App]
        Backend[FastAPI Backend<br/>Container App]
    end
    
    subgraph "Data Services"
        PostgreSQL[Azure Database<br/>for PostgreSQL]
    end
    
    subgraph "Supporting Services"
        ACR[Azure Container Registry]
        AppInsights[Application Insights]
        LogAnalytics[Log Analytics Workspace]
        KeyVault[Azure Key Vault]
    end
    
    subgraph "Security"
        ManagedIdentity[User Assigned<br/>Managed Identity]
    end
    
    Frontend --> Backend
    Backend --> PostgreSQL
    Frontend --> ACR
    Backend --> ACR
    Backend --> KeyVault
    Backend --> AppInsights
    Frontend --> AppInsights
    AppInsights --> LogAnalytics
    ManagedIdentity --> ACR
    ManagedIdentity --> KeyVault
```

**Flujo de datos:**
- Las Container Apps obtienen sus imágenes desde Azure Container Registry
- El frontend Angular se comunica con el backend FastAPI a través de APIs REST
- El backend FastAPI interactúa con Azure Database for PostgreSQL para almacenamiento de datos
- Las credenciales de la base de datos se almacenan en Azure Key Vault
- Todas las aplicaciones envían telemetría a Application Insights

## **Recommended Azure Resources**

### Aplicación proyecto-plantitas

**Backend Service**
- Application: proyecto-plantitas-backend
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption (0.5 vCPU, 1 GB memory) - Ideal para desarrollo y cargas de trabajo pequeñas a medianas
  - Configuration:
    - language: python
    - dockerFilePath: ./backend/Dockerfile
    - dockerContext: ./backend
    - Environment Variables: 
      - `DATABASE_URL` (desde Key Vault)
      - `CORS_ORIGINS`
      - `JWT_SECRET_KEY` (desde Key Vault)
  - Dependencies:
    - Azure Database for PostgreSQL Flexible Server
    - Azure Key Vault

**Frontend Service**
- Application: proyecto-plantitas-frontend
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption (0.5 vCPU, 1 GB memory)
  - Configuration:
    - language: nodejs
    - dockerFilePath: ./frontend/Dockerfile
    - dockerContext: ./frontend
    - Environment Variables: 
      - `API_BASE_URL` (URL del backend)

### Dependencies Resources

**Base de datos**
- Dependency Name: Azure Database for PostgreSQL Flexible Server
- SKU: Burstable B1ms (1 vCore, 2 GB RAM) - Costo-efectivo para desarrollo
- Service Type: Azure Database for PostgreSQL Flexible Server
- Connection Type: Connection String con autenticación por contraseña
- Environment Variables: `DATABASE_URL`

### Recommended Supporting Services

**Servicios de soporte**
- Application Insights: Para monitoreo y telemetría de aplicaciones
- Log Analytics Workspace: Centralizará logs de todas las Container Apps
- Key Vault: Para almacenar connection strings de PostgreSQL y secretos JWT
- Container Registry: Para almacenar imágenes de contenedores del frontend y backend

### Recommended Security Configurations

**Para Container Apps:**
- User Managed Identity: Debe asignarse a ambas container apps
- AcrPull role assignment: La identidad administrada debe tener el rol **AcrPull** ("7f951dda-4ed3-4680-a7ca-43fe172d538d") asignado al container registry
- Key Vault Access Policy: La identidad administrada debe tener permisos de lectura en Key Vault

## **Execution Step**
> **Pasos para que Copilot siga; pídele a Copilot que actualice o ejecute este plan.**

### 1. Provision Azure Infrastructure And Deploy the Application:
1. Obtener las reglas IaC usando la herramienta `iac-rules-get`
2. Generar archivos IaC (Bicep) para los recursos Azure requeridos basados en el plan
3. Pre-check: usar herramienta `get_errors` para verificar errores de gramática en Bicep. Corregir errores si existen
4. Ejecutar el comando AZD `azd up` para aprovisionar recursos y confirmar que cada recurso se crea correctamente
5. Verificar el output del deployment para asegurar que los recursos se aprovisionaron exitosamente
6. Verificar los logs de la aplicación con la herramienta `azd-app-log-get` para asegurar que los servicios están ejecutándose

### 2. Summary:
1. Resumir el resultado del deployment y guardar en '.azure/summary.copilotmd'. Debe listar todos los archivos de deployment modificados y una breve descripción de cada archivo. Luego tener un diagrama mostrando los recursos Azure aprovisionados.